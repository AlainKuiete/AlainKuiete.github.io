{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOBfY4cpOAQ8U2Uvkvg5NNs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlainKuiete/AlainKuiete.github.io/blob/master/tensorflow_start\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pK4rqZvdi7YL",
        "colab_type": "text"
      },
      "source": [
        "We load tensorflow and create a session"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6_Uw6M_shbLb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import tensorflow as tf\n",
        "sess = tf.compat.v1.Session()"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2At-3rTJjrLy",
        "colab_type": "text"
      },
      "source": [
        "Declare a tensor and placeholder. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h7wvgNzPipg0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        },
        "outputId": "430e451f-6eb8-4636-9246-376ad7b69dcd"
      },
      "source": [
        "import numpy as np\n",
        "x_vals = np.array([1., 3., 5., 7., 9.])\n",
        "tf.compat.v1.disable_eager_execution()\n",
        "x_data = tf.compat.v1.placeholder(tf.float32)\n",
        "m_const = tf.constant(3.)\n",
        "my_product = tf.multiply(x_data, m_const)\n",
        "for x_val in x_vals:\n",
        "  print(sess.run(my_product, feed_dict={x_data:x_val}))"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3.0\n",
            "9.0\n",
            "15.0\n",
            "21.0\n",
            "27.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jaMEpbJirWth",
        "colab_type": "text"
      },
      "source": [
        "Layering Nested operations"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mzE6OGdOrjj0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "my_array = [[1., 3., 5., 7., 9.],\n",
        "            [-2., 0., 2., 4., 6.],\n",
        "            [-6., -3., 0., 3., 6.]]\n",
        "x_vals = np.array([my_array, my_array + np.ones((3,5))])\n",
        "x_data = tf.compat.v1.placeholder(tf.float32, shape=(3,5))\n"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SEZ9e11Y0iIF",
        "colab_type": "text"
      },
      "source": [
        "We create the constants that will be used for the matrix[link text](https://)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AsjYrVJv0R50",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "m1 = tf.constant([[1.], [0.], [-1.], [2.], [4.]])\n",
        "m2 = tf.constant([[2.]])\n",
        "a1 = tf.constant([[10.]])"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2xwq_GRM2ijE",
        "colab_type": "text"
      },
      "source": [
        "We declare the operations and add them to the graph"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fzr1d0eE2rj7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "prod1 = tf.matmul(x_data, m1)\n",
        "prod2 = tf.matmul(prod1, m2)\n",
        "add1 = tf.add(prod2, a1)"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yD8grykT3pb0",
        "colab_type": "text"
      },
      "source": [
        "We feed the data through our graph"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ViAPAnMo3xWY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "9edf3ae6-1a13-4a82-c77b-0a4f658f80f4"
      },
      "source": [
        "for x_val in x_vals:\n",
        "  print(sess.run(add1, feed_dict={x_data:x_val}))"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[102.]\n",
            " [ 66.]\n",
            " [ 58.]]\n",
            "[[114.]\n",
            " [ 78.]\n",
            " [ 70.]]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}